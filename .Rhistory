install.packages("tidyverse", "rmarkdown", "knitr", "dply", "plyr")
install.packages("tidyverse")
install.packages("rmarkdown")
install.packages("knitr")
install.packages("dplyr")
install.packages("plyr")
install.packages("suncalc")
install.packages("lubridate")
install.packages("ggplot2")
install.packages("ggforce")
install.packages("pander")
install.packages("reshape2")
install.packages("janitor")
install.packages("RColorBrewer")
install.packages("rcompanion")
install.packages("png")
install.packages("grid")
shiny::runApp('Y:/Mammal Society/Ecobat/Apps/Nightly/App-1')
runApp('Y:/Mammal Society/Ecobat/Apps/Nightly/App-1')
library(shiny); runApp('Y:/Mammal Society/Ecobat/bat colour rings/ring_app_dropbox.R')
install.packages("shinyjs")
install.packages("DT")
install.packages("rdrop2")
runApp('Y:/Mammal Society/Ecobat/bat colour rings/ring_app_dropbox.R')
runApp('Y:/Mammal Society/Ecobat/bat colour rings/shiny_form.R')
runApp('Y:/Mammal Society/Ecobat/bat colour rings/shiny_form.R')
runApp('Y:/Mammal Society/Ecobat/bat colour rings/shiny_form.R')
runApp('Y:/Mammal Society/Ecobat/bat colour rings/shiny_form.R')
runApp('Y:/Mammal Society/Ecobat/bat colour rings/shiny_form.R')
runApp('Y:/Mammal Society/Ecobat/bat colour rings/ring_app_gdrive.R')
install.packages("googlesheets")
runApp('Y:/Mammal Society/Ecobat/bat colour rings/ring_app_gdrive.R')
runApp('Y:/Mammal Society/Ecobat/bat colour rings/ring_app_dropbox.R')
runApp('Y:/Mammal Society/Ecobat/bat colour rings/ring_app_dropbox.R')
runApp('Y:/Mammal Society/Ecobat/bat colour rings/ring_app_dropbox.R')
drop_auth()
drop_auth(rdstoken = ".httr-oauth")
# drop box authentication
drop_auth(rdstoken = ".httr-oauth")
runApp('Y:/Mammal Society/Ecobat/bat colour rings/ring_app_dropbox.R')
drop_auth(new_user = TRUE)
token <- drop_auth()
saveRDS(token, "/path/to/tokenfile.RDS")
token <- drop_auth()
saveRDS(token, ".httr-oauth")
# drop box authentication
drop_auth(rdstoken = ".httr-oauth")
token <- drop_auth()
saveRDS(token, file = "token.rds")
updateR()
install.packages("installr")
install.Rtools()
install.packages("installr")
updateR()
R.Version
R.version
updateR()
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR()
shiny::runApp('Y:/Mammal Society/Ecobat/Apps/Nightly/App-1')
install.packages("shiny")
.libPaths()
.libPaths()
.libPaths()
shiny::runApp('Y:/Mammal Society/Ecobat/Roost Sizes')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes')
library(shiny); runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Bat_Colour_Rings/dropbox_ring_app.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
?epochTime
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes')
shiny::runApp('D:/Roost_App')
setwd("D:/Roost_App")
shiny::runApp()
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, comment = NULL)
#NOTE FINAL BIT OF CODE SHOULD BE RESAVING NEWMASTER AS MASTER AGAIN SO PROFORMA IS ADDED TO MASTER FILE READY TO BEGIN AGAIN WITH NEXT PROFORMA!
#copied and pased from Ecobat nightly
library(rmarkdown)
library(ggplot2)
library(knitr)
library(pander)
library(plyr)
library(rcompanion)
library(tidyr)
library(lubridate)
library(ggforce)
library(reshape2) #graphs
library(dplyr) #data wrangling (except percentiles)
library(magrittr) #piping
library(tidyverse)
#When working from RMD use these to load proforma and master, hash out when done
proforma <- read.csv("proforma.csv", header = TRUE)
master <- read.csv("master.csv", header = TRUE)
#When working from Shiny app use these to load proforma and master, hash out when in RMD
#proforma <- params$n #this works from desktop
#master <- params$m #this works from desktop
#Create separate columns for day, month and year
masteredit <- master
#tells it that date in a2 is formatted dmy not ymd
masteredit$SurveyDate <- lubridate::dmy(masteredit$SurveyDate)
masteredit2 <- masteredit %>%
dplyr::mutate(day = lubridate::day(SurveyDate),
month = lubridate::month(SurveyDate),
year = lubridate::year(SurveyDate))
master <- masteredit2
#Create separate columns for day, month, year
proformaedit <- proforma
proformaedit$SurveyDate <- lubridate::dmy(proformaedit$SurveyDate)
proformaedit2 <- proformaedit %>%
dplyr::mutate(day = lubridate::day(SurveyDate),
month = lubridate::month(SurveyDate),
year = lubridate::year(SurveyDate))
proforma <- proformaedit2
#Bind the files together
newmaster <- rbind(master, proforma)
newmastercopy <- newmaster
newmastercopy$SurveyDate <- NULL
newmastercopy[newmastercopy == ""] <- NA
newmastercopy <- na.omit(newmastercopy)
#Take any rows containing blank data out of newmaster
withoutblanks <- newmastercopy
withoutblanks[withoutblanks == ""] <- NA
withoutblanks2 <- na.omit(withoutblanks)
#Calculating percentiles
#get rid of rows where TotalCount = 0 - we are not including 0 data in percentiles, may provide an appendix with results which include data with 0s in it.
alldatanozeros <- filter(withoutblanks2, TotalCount > 0)
referencerange <- nrow(alldatanozeros)
#Get desired subsets to use from newmaster, need:
# (1) Prebreeding dataset from Jan to June, later will need 'if' for babies is no
# (2) Need Postbredding dataset July to June with 'if' for babies is yes
# (3) For pre and post, subset with peak counts for same location acorss years with median across months
#Create dataset containing only data when month is Jan to June (or if the column
#about babies flying says no but can't really do that until the column is there
#so leave this out for now)
#filter so only months Jan - June
prebreeding <- alldatanozeros %>%
filter(month == 1 | month == 2 | month == 3 | month == 4 | month == 5 | month == 6)
#when have column for babies will add to the end of 6) %>% then new line
#filter(Column name for that == 'No')
#filter so only July to December
postbreeding <- alldatanozeros %>%
filter(month == 7 | month == 8 | month == 9 | month == 10 | month == 11 | month == 12)
#when have column for babies will add to the end of 6) %>% then new line filter(Column name for that == 'Yes')
#will also be an #Unsure' option but think if don't specify will just default to the correct month anyway.
#Want peak count within year and median count across years
#get highest count for each year
prebreedingmax <- prebreeding %>%
group_by(gridref, Species, year) %>%
summarise(max = max(TotalCount))
#take the median count for each location
prebreedingmedian <- prebreedingmax %>%
group_by(gridref, Species) %>%
summarise(median = median(max))
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, comment = NULL)
#NOTE FINAL BIT OF CODE SHOULD BE RESAVING NEWMASTER AS MASTER AGAIN SO PROFORMA IS ADDED TO MASTER FILE READY TO BEGIN AGAIN WITH NEXT PROFORMA!
#copied and pased from Ecobat nightly
library(rmarkdown)
library(ggplot2)
library(knitr)
library(pander)
library(plyr)
library(rcompanion)
library(tidyr)
library(lubridate)
library(ggforce)
library(reshape2) #graphs
library(dplyr) #data wrangling (except percentiles)
library(magrittr) #piping
library(tidyverse)
#When working from RMD use these to load proforma and master, hash out when done
proforma <- read.csv("proforma.csv", header = TRUE)
master <- read.csv("master.csv", header = TRUE)
#When working from Shiny app use these to load proforma and master, hash out when in RMD
#proforma <- params$n #this works from desktop
#master <- params$m #this works from desktop
#Create separate columns for day, month and year
masteredit <- master
#tells it that date in a2 is formatted dmy not ymd
masteredit$SurveyDate <- lubridate::dmy(masteredit$SurveyDate)
masteredit2 <- masteredit %>%
dplyr::mutate(day = lubridate::day(SurveyDate),
month = lubridate::month(SurveyDate),
year = lubridate::year(SurveyDate))
master <- masteredit2
#Create separate columns for day, month, year
proformaedit <- proforma
proformaedit$SurveyDate <- lubridate::dmy(proformaedit$SurveyDate)
proformaedit2 <- proformaedit %>%
dplyr::mutate(day = lubridate::day(SurveyDate),
month = lubridate::month(SurveyDate),
year = lubridate::year(SurveyDate))
proforma <- proformaedit2
#Bind the files together
newmaster <- rbind(master, proforma)
newmastercopy <- newmaster
newmastercopy$SurveyDate <- NULL
newmastercopy[newmastercopy == ""] <- NA
newmastercopy <- na.omit(newmastercopy)
#Take any rows containing blank data out of newmaster
withoutblanks <- newmastercopy
withoutblanks[withoutblanks == ""] <- NA
withoutblanks2 <- na.omit(withoutblanks)
#Calculating percentiles
#get rid of rows where TotalCount = 0 - we are not including 0 data in percentiles, may provide an appendix with results which include data with 0s in it.
alldatanozeros <- filter(withoutblanks2, TotalCount > 0)
referencerange <- nrow(alldatanozeros)
#Get desired subsets to use from newmaster, need:
# (1) Prebreeding dataset from Jan to June, later will need 'if' for babies is no
# (2) Need Postbredding dataset July to June with 'if' for babies is yes
# (3) For pre and post, subset with peak counts for same location acorss years with median across months
#Create dataset containing only data when month is Jan to June (or if the column
#about babies flying says no but can't really do that until the column is there
#so leave this out for now)
#filter so only months Jan - June
prebreeding <- alldatanozeros %>%
filter(month == 1 | month == 2 | month == 3 | month == 4 | month == 5 | month == 6)
#when have column for babies will add to the end of 6) %>% then new line
#filter(Column name for that == 'No')
#filter so only July to December
postbreeding <- alldatanozeros %>%
filter(month == 7 | month == 8 | month == 9 | month == 10 | month == 11 | month == 12)
#when have column for babies will add to the end of 6) %>% then new line filter(Column name for that == 'Yes')
#will also be an #Unsure' option but think if don't specify will just default to the correct month anyway.
#Want peak count within year and median count across years
#get highest count for each year
prebreedingmax <- prebreeding %>%
group_by(gridref, Species, year) %>%
summarise(max = max(TotalCount))
#take the median count for each location
prebreedingmedian <- prebreedingmax %>%
group_by(gridref, Species) %>%
summarise(median = median(max))
#do same for postbreeding data
postbreedingmax <- postbreeding %>%
group_by(gridref, Species, year) %>%
summarise(max = max(TotalCount))
postbreedingmedian <- postbreedingmax %>%
group_by(gridref, Species) %>%
summarise(median = median(max))
#Graph 1: Natterer's all roost count by month (x-axis=month, y-axis=count)
#Subset master to have SurveyDate, Year, Month, Day and TotalCount
#Want a panel with two boxplots, one of all data and one of just the pre or post breeding data depending on the date the roost in the proforma was made
#Proforma also needs a column called median so you can plot the point, this column needs to be the same as TotalCount
proforma$median <- proforma$TotalCount
alldatatotalcount <- subset(alldatanozeros, select = c(TotalCount, year, month, day))
#Change data with blank space to NA (does not include 0 data)
par(mfrow = c(2, 1)) #not sure this is doing anything atm - check when knit
ggplot(alldatatotalcount, aes(x="Total Count", y=TotalCount))+geom_boxplot()+
geom_point(
data=proforma,
aes(x="Total Count", y=TotalCount),
color="red", size=5
)
#This is not working at the moment - saying if month is 1-6 use prebreeding data, if month 7-12 in proforma data is postbreeding.
if(proforma$month == 1 | 2 | 3 | 5 | 6) {
ggplot(prebreedingmedian, aes(x="Median Prebreeding Count", y=median))+
geom_boxplot() +
geom_point(
data=proforma,
aes(x="Median Prebreeding Count", y=median),
colour="red", size=5
)
} else {
ggplot(postbreedingmedian, aes(x="Median Prebreeding Count", y=median))+
geom_boxplot() +
geom_point(
data=proforma,
aes(x="Median Prebreeding Count", y=median),
colour="red", size=5
)
}
#Need to add a label to the proforma point on the graph but do this later, along with getting them into just one panel
#Number of roosts across each month, can't do this for pre and post breeding because the way I work those values out cuts out the months (see above) only thing could do is plot months 1-6 or 7-12 but seems pointless when already in this graph. Struggling to get a red dot on.
#Add red dots for where proforma value is
boxplot(alldatatotalcount$TotalCount ~ alldatatotalcount$month, xlab = "Month", ylab = "Total Count of Bats in Roost")
#What I've tried so far, not erroring but point is not showing on graph :+geom_point(aes(proforma$TotalCount ~ proforma$month, xlab = "Month", ylab = "Total Count of Bats in Roost", color="red", size=5))
#Plot a boxplot of roost count by structure
allstructures <- subset(alldatanozeros, select = c(TotalCount, StructureType, year, month, day))
#trying to replicate a graph from Ecobat code - very pretty looking graph (woo) need to work on getting giving the y axis more space - rather than downsizing x axis text need to make size of plot bigger
graphbox<-ggplot(allstructures, aes(x=StructureType, y=TotalCount)) +
geom_boxplot(allstructures, mapping = aes(fill=allstructures$StructureType))+
xlab("Structure")+
ylab("Bat Count")+
scale_x_discrete(drop=TRUE) +
scale_y_continuous(breaks=seq(0,10,20)) +
expand_limits(y=c(0,200))+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype="blank"),
axis.line=element_line(size=0.5, colour="black",
linetype="solid"),
axis.title.x=element_text(size=18),
axis.text.x  = element_text(angle=90, face="italic",
size=8, hjust=1, vjust=0),
axis.text.y  = element_text(size=12),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
axis.title.y=element_text(size=16),
legend.position="none")
graphbox
alldatapercentiles <- alldatanozeros
alldatapercentiles$percentilesall <- ecdf(alldatapercentiles$TotalCount)(alldatapercentiles$TotalCount)*100
alldatapercentiles$percentileswholeall <- lapply(alldatapercentiles$percentilesall, as.integer)
#Don't need this atm but keep incase
#Percentiles2 <- alldatapercentiles$TotalCount
#Percentiles2.rank <- rank(Percentiles2, ties.method="min")
#alldatapercentiles$percentiles2 <- round(Percentiles2.rank/length(Percentiles2.rank)*100)
q0 <- quantile(alldatapercentiles$TotalCount, c(.0))
q1 <- quantile(alldatapercentiles$TotalCount, c(.20))
q2 <- quantile(alldatapercentiles$TotalCount, c(.40))
q3 <- quantile(alldatapercentiles$TotalCount, c(.60))
q4 <- quantile(alldatapercentiles$TotalCount, c(.80))
q5 <- quantile(alldatapercentiles$TotalCount, c(.95))
#Create percentile rank column
alldatapercentiles <- alldatapercentiles%>%
mutate(
percentilerankall = case_when(
percentilesall >= q0 & percentilesall < q1 ~ "low",
percentilesall >= q1 & percentilesall < q2 ~ "low/moderate",
percentilesall >= q2 & percentilesall < q3 ~ "moderate",
percentilesall >= q3 & percentilesall < q4 ~ "moderate/high",
percentilesall >= q4 & percentilesall < q5 ~ "high",
percentilesall >= q5 ~ "exceptional",
)
)
#Pull out percentile rank of proforma row from newmaster
proforma$percentilesall <- ecdf(alldatapercentiles$TotalCount)(proforma$TotalCount)*100
proforma$percentileswholeall <- lapply(proforma$percentilesall, as.integer)
#Percentiles2 <- proforma$TotalCount
#Percentiles2.rank <- rank(Percentiles2, ties.method="min")
#proforma$percentiles2 <- round(Percentiles2.rank/length(Percentiles2.rank)*100)
proforma <- proforma%>%
mutate(
percentilerankall = case_when(
percentilesall >= q0 & percentilesall < q1 ~ "low",
percentilesall >= q1 & percentilesall < q2 ~ "low/moderate",
percentilesall >= q2 & percentilesall < q3 ~ "moderate",
percentilesall >= q3 & percentilesall < q4 ~ "moderate/high",
percentilesall >= q4 & percentilesall < q5 ~ "high",
percentilesall >= q5 ~ "exceptional",
)
)
#make a column listing the refrange
alldatapercentiles$refrange <- nrow(alldatapercentiles)
#Now do the same again but with a subset of the data and need something in their saying if month of proforma is 1-6 use prebreeding, else use post
#when first tried, created two percentilesubset dataframes, both identical to prebreedingmedian, think have fixed but check if this is still happening - will have add in an and when have the baby flying category.
if (proforma$month == 1 | 2 | 3 | 4 | 5 | 6) {
ps <- prebreedingmedian #ps = percentile subset
} else {ps <- postbreedingmedian}
#now do same for percentilesubset as did for one with all data to make percentiles and percentiles of new proforma df or row within proforma.
ps$percentilessub <- ecdf(ps$median)(ps$median)*100
ps$percentileswholesub <- lapply(ps$percentilessub, as.integer)
#create the ranks, qs = quartile subset
qs0 <- quantile(ps$median, c(.0))
qs1 <- quantile(ps$median, c(.20))
qs2 <- quantile(ps$median, c(.40))
qs3 <- quantile(ps$median, c(.60))
qs4 <- quantile(ps$median, c(.80))
qs5 <- quantile(ps$median, c(.100))
#Create percentile rank column
ps <- ps%>%
mutate(
percentileranksub = case_when(
percentilessub >= qs0 & percentilessub < qs1 ~ "low",
percentilessub >= qs1 & percentilessub < qs2 ~ "low/moderate",
percentilessub >= qs2 & percentilessub < qs3 ~ "moderate",
percentilessub >= qs3 & percentilessub < qs4 ~ "moderate/high",
percentilessub >= qs4 & percentilessub < qs5 ~ "high",
percentilessub >= qs5 ~ "exceptional",
)
)
ps$refrange <- nrow(ps)
#create column with subset percentile of proforma,
proforma$percentilessub <- ecdf(ps$median)(proforma$median)*100
proforma$percentileswholesub <- lapply(proforma$percentilessub, as.integer)
#create subset rank for proforma
proforma <- proforma%>%
mutate(
percentileranksub = case_when(
percentilessub >= qs0 & percentilessub < qs1 ~ "low",
percentilessub >= qs1 & percentilessub < qs2 ~ "low/moderate",
percentilessub >= qs2 & percentilessub < qs3 ~ "moderate",
percentilessub >= qs3 & percentilessub < qs4 ~ "moderate/high",
percentilessub >= qs4 & percentilessub < qs5 ~ "high",
percentilessub >= qs5 ~ "exceptional",
)
)
#try to create a panel of two boxplots, one showing percentile for all data and one for the subset
par(mfrow = c(2, 1)) #not sure this is doing anything atm - check when knit
#plot of all percentiles from the df containing all data
ggplot(alldatapercentiles, aes(x="percentiles", y=percentilesall))+geom_boxplot()+
geom_point(
data=proforma,
aes(x="percentiles", y=percentilesall),
color="red", size=5
)
#plot of subset of percentiles from either pre- or post- breeding subset
ggplot(ps, aes(x="percentiles", y=percentilessub))+geom_boxplot()+
geom_point(
data=proforma,
aes(x="percentiles", y=percentilessub),
color="red", size=5
)
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
