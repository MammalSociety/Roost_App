saveRDS(token, "/path/to/tokenfile.RDS")
token <- drop_auth()
saveRDS(token, ".httr-oauth")
# drop box authentication
drop_auth(rdstoken = ".httr-oauth")
token <- drop_auth()
saveRDS(token, file = "token.rds")
updateR()
install.packages("installr")
install.Rtools()
install.packages("installr")
updateR()
R.Version
R.version
updateR()
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR()
shiny::runApp('Y:/Mammal Society/Ecobat/Apps/Nightly/App-1')
install.packages("shiny")
.libPaths()
.libPaths()
.libPaths()
shiny::runApp('Y:/Mammal Society/Ecobat/Roost Sizes')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes')
library(shiny); runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Bat_Colour_Rings/dropbox_ring_app.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
?epochTime
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes/Test.R')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes')
runApp('Y:/Mammal Society/Ecobat/Roost Sizes')
shiny::runApp('D:/Roost_App')
shiny::runApp('D:/Roost_App')
setwd("D:/Roost_App")
getwd()
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, comment = NULL)
#NOTE FINAL BIT OF CODE SHOULD BE RESAVING NEWMASTER AS MASTER AGAIN SO PROFORMA IS ADDED TO MASTER FILE READY TO BEGIN AGAIN WITH NEXT PROFORMA!
#copied and pased from Ecobat nightly
library(rmarkdown)
library(ggplot2)
library(knitr)
library(pander)
library(plyr)
library(rcompanion)
library(tidyr)
library(lubridate)
library(ggforce)
library(reshape2) #graphs
library(dplyr) #data wrangling (except percentiles)
library(magrittr) #piping
library(tidyverse)
library(rdrop2)
#stuff to unhash when testing rds file
drop_auth(rdstoken = "droptoken.rds")
drop_acc()
#When working from RMD use these to load proforma and master, hash out when done
#proforma <- read.csv("proforma.csv", header = TRUE)
#master <- drop_read_csv("roosts/master.csv")
#Unhash when running from server
#proforma <- params$n #this works from desktop
#master <- params$m
#Create separate columns for day, month and year
masteredit <- master
proforma <- read.csv("proforma.csv", header = TRUE)
master <- drop_read_csv("roosts/master.csv", header = TRUE)
#copied and pased from Ecobat nightly
library(rmarkdown)
library(ggplot2)
library(knitr)
library(pander)
library(plyr)
library(rcompanion)
library(tidyr)
library(lubridate)
library(ggforce)
library(reshape2) #graphs
library(dplyr) #data wrangling (except percentiles)
library(magrittr) #piping
library(tidyverse)
library(rdrop2)
#stuff to unhash when testing rds file
drop_auth(rdstoken = "droptoken.rds")
drop_acc()
proforma <- read.csv("proforma.csv", header = TRUE)
master <- drop_read_csv("roosts/master.csv", header = TRUE)
#Unhash when running from server
#proforma <- params$n #this works from desktop
#master <- params$m
#Create separate columns for day, month and year
masteredit <- master
#tells it that date in a2 is formatted dmy not ymd
masteredit$SurveyDate <- lubridate::dmy(masteredit$SurveyDate)
masteredit2 <- masteredit %>%
dplyr::mutate(day = lubridate::day(SurveyDate),
month = lubridate::month(SurveyDate),
year = lubridate::year(SurveyDate))
master <- masteredit2
#Create separate columns for day, month, year
proformaedit <- proforma
proformaedit$SurveyDate <- lubridate::dmy(proformaedit$SurveyDate)
proformaedit2 <- proformaedit %>%
dplyr::mutate(day = lubridate::day(SurveyDate),
month = lubridate::month(SurveyDate),
year = lubridate::year(SurveyDate))
proforma <- proformaedit2
#Bind the files together
newmaster <- rbind(master, proforma)
newmastercopy <- newmaster
newmastercopy$SurveyDate <- NULL
newmastercopy[newmastercopy == ""] <- NA
newmastercopy <- na.omit(newmastercopy)
#Take any rows containing blank data out of newmaster
withoutblanks <- newmastercopy
withoutblanks[withoutblanks == ""] <- NA
withoutblanks2 <- na.omit(withoutblanks)
#Calculating percentiles
#get rid of rows where TotalCount = 0 - we are not including 0 data in percentiles, may provide an appendix with results which include data with 0s in it.
alldatanozeros <- filter(withoutblanks2, TotalCount > 0)
referencerange <- nrow(alldatanozeros)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, comment = NULL)
#NOTE FINAL BIT OF CODE SHOULD BE RESAVING NEWMASTER AS MASTER AGAIN SO PROFORMA IS ADDED TO MASTER FILE READY TO BEGIN AGAIN WITH NEXT PROFORMA!
#copied and pased from Ecobat nightly
library(rmarkdown)
library(ggplot2)
library(knitr)
library(pander)
library(plyr)
library(rcompanion)
library(tidyr)
library(lubridate)
library(ggforce)
library(reshape2) #graphs
library(dplyr) #data wrangling (except percentiles)
library(magrittr) #piping
library(tidyverse)
library(rdrop2)
#stuff to unhash when testing rds file
drop_auth(rdstoken = "droptoken.rds")
drop_acc()
proforma <- read.csv("proforma.csv", header = TRUE)
master <- drop_read_csv("roosts/master.csv", header = TRUE)
#Unhash when running from server
#proforma <- params$n #this works from desktop
#master <- params$m
#Create separate columns for day, month and year
masteredit <- master
#tells it that date in a2 is formatted dmy not ymd
masteredit$SurveyDate <- lubridate::dmy(masteredit$SurveyDate)
masteredit2 <- masteredit %>%
dplyr::mutate(day = lubridate::day(SurveyDate),
month = lubridate::month(SurveyDate),
year = lubridate::year(SurveyDate))
master <- masteredit2
#Create separate columns for day, month, year
proformaedit <- proforma
proformaedit$SurveyDate <- lubridate::dmy(proformaedit$SurveyDate)
proformaedit2 <- proformaedit %>%
dplyr::mutate(day = lubridate::day(SurveyDate),
month = lubridate::month(SurveyDate),
year = lubridate::year(SurveyDate))
proforma <- proformaedit2
#Bind the files together
newmaster <- rbind(master, proforma)
newmastercopy <- newmaster
newmastercopy$SurveyDate <- NULL
newmastercopy[newmastercopy == ""] <- NA
newmastercopy <- na.omit(newmastercopy)
#Take any rows containing blank data out of newmaster
withoutblanks <- newmastercopy
withoutblanks[withoutblanks == ""] <- NA
withoutblanks2 <- na.omit(withoutblanks)
#Calculating percentiles
#get rid of rows where TotalCount = 0 - we are not including 0 data in percentiles, may provide an appendix with results which include data with 0s in it.
alldatanozeros <- filter(withoutblanks2, TotalCount > 0)
referencerange <- nrow(alldatanozeros)
#Get desired subsets to use from newmaster, need:
# (1) Prebreeding dataset from Jan to June, later will need 'if' for babies is no
# (2) Need Postbredding dataset July to June with 'if' for babies is yes
# (3) For pre and post, subset with peak counts for same location acorss years with median across months
#Create dataset containing only data when month is Jan to June (or if the column
#about babies flying says no but can't really do that until the column is there
#so leave this out for now)
#filter so only months Jan - June
prebreeding <- alldatanozeros %>%
filter(month == 1 | month == 2 | month == 3 | month == 4 | month == 5 | month == 6)
#when have column for babies will add to the end of 6) %>% then new line
#filter(Column name for that == 'No')
#filter so only July to December
postbreeding <- alldatanozeros %>%
filter(month == 7 | month == 8 | month == 9 | month == 10 | month == 11 | month == 12)
#when have column for babies will add to the end of 6) %>% then new line filter(Column name for that == 'Yes')
#will also be an #Unsure' option but think if don't specify will just default to the correct month anyway.
#Want peak count within year and median count across years
#get highest count for each year
prebreedingmax <- prebreeding %>%
group_by(gridref, Species, year) %>%
summarise(max = max(TotalCount))
#take the median count for each location
prebreedingmedian <- prebreedingmax %>%
group_by(gridref, Species) %>%
summarise(median = median(max))
View(prebreedingmax)
View(prebreeding)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, comment = NULL)
#NOTE FINAL BIT OF CODE SHOULD BE RESAVING NEWMASTER AS MASTER AGAIN SO PROFORMA IS ADDED TO MASTER FILE READY TO BEGIN AGAIN WITH NEXT PROFORMA!
#copied and pased from Ecobat nightly
library(rmarkdown)
library(ggplot2)
library(knitr)
library(pander)
library(plyr)
library(rcompanion)
library(tidyr)
library(lubridate)
library(ggforce)
library(reshape2) #graphs
library(dplyr) #data wrangling (except percentiles)
library(magrittr) #piping
library(tidyverse)
library(rdrop2)
#stuff to unhash when testing rds file
drop_auth(rdstoken = "droptoken.rds")
drop_acc()
proforma <- read.csv("proforma.csv", header = TRUE)
master <- drop_read_csv("roosts/master.csv")
#Unhash when running from server
#proforma <- params$n #this works from desktop
#master <- params$m
#Create separate columns for day, month and year
masteredit <- master
#tells it that date in a2 is formatted dmy not ymd
masteredit$SurveyDate <- lubridate::dmy(masteredit$SurveyDate)
masteredit2 <- masteredit %>%
dplyr::mutate(day = lubridate::day(SurveyDate),
month = lubridate::month(SurveyDate),
year = lubridate::year(SurveyDate))
master <- masteredit2
#Create separate columns for day, month, year
proformaedit <- proforma
proformaedit$SurveyDate <- lubridate::dmy(proformaedit$SurveyDate)
proformaedit2 <- proformaedit %>%
dplyr::mutate(day = lubridate::day(SurveyDate),
month = lubridate::month(SurveyDate),
year = lubridate::year(SurveyDate))
proforma <- proformaedit2
#Bind the files together
newmaster <- rbind(master, proforma)
newmastercopy <- newmaster
newmastercopy$SurveyDate <- NULL
newmastercopy[newmastercopy == ""] <- NA
newmastercopy <- na.omit(newmastercopy)
#Take any rows containing blank data out of newmaster
withoutblanks <- newmastercopy
withoutblanks[withoutblanks == ""] <- NA
withoutblanks2 <- na.omit(withoutblanks)
#Calculating percentiles
#get rid of rows where TotalCount = 0 - we are not including 0 data in percentiles, may provide an appendix with results which include data with 0s in it.
alldatanozeros <- filter(withoutblanks2, TotalCount > 0)
referencerange <- nrow(alldatanozeros)
#Get desired subsets to use from newmaster, need:
# (1) Prebreeding dataset from Jan to June, later will need 'if' for babies is no
# (2) Need Postbredding dataset July to June with 'if' for babies is yes
# (3) For pre and post, subset with peak counts for same location acorss years with median across months
#Create dataset containing only data when month is Jan to June (or if the column
#about babies flying says no but can't really do that until the column is there
#so leave this out for now)
#filter so only months Jan - June
prebreeding <- alldatanozeros %>%
filter(month == 1 | month == 2 | month == 3 | month == 4 | month == 5 | month == 6)
#when have column for babies will add to the end of 6) %>% then new line
#filter(Column name for that == 'No')
#filter so only July to December
postbreeding <- alldatanozeros %>%
filter(month == 7 | month == 8 | month == 9 | month == 10 | month == 11 | month == 12)
#when have column for babies will add to the end of 6) %>% then new line filter(Column name for that == 'Yes')
#will also be an #Unsure' option but think if don't specify will just default to the correct month anyway.
#Want peak count within year and median count across years
#get highest count for each year
prebreedingmax <- prebreeding %>%
group_by(gridref, Species, year) %>%
summarise(max = max(TotalCount))
#take the median count for each location
prebreedingmedian <- prebreedingmax %>%
group_by(gridref, Species) %>%
summarise(median = median(max))
prebreedingmax <- prebreeding %>%
group_by(gridref, year) %>%
summarise(max = max(TotalCount))
View(prebreedingmax)
#copied and pased from Ecobat nightly
library(rmarkdown)
library(ggplot2)
library(knitr)
library(pander)
library(plyr)
library(rcompanion)
library(tidyr)
library(lubridate)
library(ggforce)
library(reshape2) #graphs
library(dplyr) #data wrangling (except percentiles)
library(magrittr) #piping
library(tidyverse)
library(rdrop2)
#stuff to unhash when testing rds file
drop_auth(rdstoken = "droptoken.rds")
drop_acc()
proforma <- read.csv("proforma.csv", header = TRUE)
master <- drop_read_csv("roosts/master.csv", header = TRUE)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, comment = NULL)
#NOTE FINAL BIT OF CODE SHOULD BE RESAVING NEWMASTER AS MASTER AGAIN SO PROFORMA IS ADDED TO MASTER FILE READY TO BEGIN AGAIN WITH NEXT PROFORMA!
#Unhash when running from server
#proforma <- params$n #this works from desktop
#master <- params$m
#Create separate columns for day, month and year
masteredit <- master
#tells it that date in a2 is formatted dmy not ymd
masteredit$SurveyDate <- lubridate::dmy(masteredit$SurveyDate)
masteredit2 <- masteredit %>%
dplyr::mutate(day = lubridate::day(SurveyDate),
month = lubridate::month(SurveyDate),
year = lubridate::year(SurveyDate))
master <- masteredit2
#Create separate columns for day, month, year
proformaedit <- proforma
proformaedit$SurveyDate <- lubridate::dmy(proformaedit$SurveyDate)
proformaedit2 <- proformaedit %>%
dplyr::mutate(day = lubridate::day(SurveyDate),
month = lubridate::month(SurveyDate),
year = lubridate::year(SurveyDate))
proforma <- proformaedit2
#Bind the files together
newmaster <- rbind(master, proforma)
newmastercopy <- newmaster
newmastercopy$SurveyDate <- NULL
newmastercopy[newmastercopy == ""] <- NA
newmastercopy <- na.omit(newmastercopy)
#Take any rows containing blank data out of newmaster
withoutblanks <- newmastercopy
withoutblanks[withoutblanks == ""] <- NA
withoutblanks2 <- na.omit(withoutblanks)
#Calculating percentiles
#get rid of rows where TotalCount = 0 - we are not including 0 data in percentiles, may provide an appendix with results which include data with 0s in it.
alldatanozeros <- filter(withoutblanks2, TotalCount > 0)
referencerange <- nrow(alldatanozeros)
#Get desired subsets to use from newmaster, need:
# (1) Prebreeding dataset from Jan to June, later will need 'if' for babies is no
# (2) Need Postbredding dataset July to June with 'if' for babies is yes
# (3) For pre and post, subset with peak counts for same location acorss years with median across months
#Create dataset containing only data when month is Jan to June (or if the column
#about babies flying says no but can't really do that until the column is there
#so leave this out for now)
#filter so only months Jan - June
prebreeding <- alldatanozeros %>%
filter(month == 1 | month == 2 | month == 3 | month == 4 | month == 5 | month == 6)
#when have column for babies will add to the end of 6) %>% then new line
#filter(Column name for that == 'No')
#filter so only July to December
postbreeding <- alldatanozeros %>%
filter(month == 7 | month == 8 | month == 9 | month == 10 | month == 11 | month == 12)
#when have column for babies will add to the end of 6) %>% then new line filter(Column name for that == 'Yes')
#will also be an #Unsure' option but think if don't specify will just default to the correct month anyway.
#Want peak count within year and median count across years
#get highest count for each year
prebreedingmax <- prebreeding %>%
group_by(gridref, year) %>%
summarise(max = max(TotalCount))
#take the median count for each location
prebreedingmedian <- prebreedingmax %>%
group_by(gridref) %>%
summarise(median = median(max))
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, comment = NULL)
#NOTE FINAL BIT OF CODE SHOULD BE RESAVING NEWMASTER AS MASTER AGAIN SO PROFORMA IS ADDED TO MASTER FILE READY TO BEGIN AGAIN WITH NEXT PROFORMA!
#copied and pased from Ecobat nightly
library(rmarkdown)
library(ggplot2)
library(knitr)
library(pander)
library(plyr)
library(rcompanion)
library(tidyr)
library(lubridate)
library(ggforce)
library(reshape2) #graphs
library(dplyr) #data wrangling (except percentiles)
library(magrittr) #piping
library(tidyverse)
library(rdrop2)
#stuff to unhash when testing rds file
drop_auth(rdstoken = "droptoken.rds")
drop_acc()
proforma <- read.csv("proforma.csv", header = TRUE)
master <- drop_read_csv("roosts/master.csv", header = TRUE)
#Unhash when running from server
#proforma <- params$n #this works from desktop
#master <- params$m
#Create separate columns for day, month and year
masteredit <- master
#tells it that date in a2 is formatted dmy not ymd
masteredit$SurveyDate <- lubridate::dmy(masteredit$SurveyDate)
masteredit2 <- masteredit %>%
dplyr::mutate(day = lubridate::day(SurveyDate),
month = lubridate::month(SurveyDate),
year = lubridate::year(SurveyDate))
master <- masteredit2
#Create separate columns for day, month, year
proformaedit <- proforma
proformaedit$SurveyDate <- lubridate::dmy(proformaedit$SurveyDate)
proformaedit2 <- proformaedit %>%
dplyr::mutate(day = lubridate::day(SurveyDate),
month = lubridate::month(SurveyDate),
year = lubridate::year(SurveyDate))
proforma <- proformaedit2
#Bind the files together
newmaster <- rbind(master, proforma)
newmastercopy <- newmaster
newmastercopy$SurveyDate <- NULL
newmastercopy[newmastercopy == ""] <- NA
newmastercopy <- na.omit(newmastercopy)
#Take any rows containing blank data out of newmaster
withoutblanks <- newmastercopy
withoutblanks[withoutblanks == ""] <- NA
withoutblanks2 <- na.omit(withoutblanks)
#Calculating percentiles
#get rid of rows where TotalCount = 0 - we are not including 0 data in percentiles, may provide an appendix with results which include data with 0s in it.
alldatanozeros <- filter(withoutblanks2, TotalCount > 0)
referencerange <- nrow(alldatanozeros)
#Get desired subsets to use from newmaster, need:
# (1) Prebreeding dataset from Jan to June, later will need 'if' for babies is no
# (2) Need Postbredding dataset July to June with 'if' for babies is yes
# (3) For pre and post, subset with peak counts for same location acorss years with median across months
#Create dataset containing only data when month is Jan to June (or if the column
#about babies flying says no but can't really do that until the column is there
#so leave this out for now)
#filter so only months Jan - June
prebreeding <- alldatanozeros %>%
filter(month == 1 | month == 2 | month == 3 | month == 4 | month == 5 | month == 6)
#when have column for babies will add to the end of 6) %>% then new line
#filter(Column name for that == 'No')
#filter so only July to December
postbreeding <- alldatanozeros %>%
filter(month == 7 | month == 8 | month == 9 | month == 10 | month == 11 | month == 12)
#when have column for babies will add to the end of 6) %>% then new line filter(Column name for that == 'Yes')
#will also be an #Unsure' option but think if don't specify will just default to the correct month anyway.
#Want peak count within year and median count across years
#get highest count for each year
prebreedingmax <- prebreeding %>%
group_by(gridref, Species, year) %>%
summarise(max = max(TotalCount))
#take the median count for each location
prebreedingmedian <- prebreedingmax %>%
group_by(gridref, Species) %>%
summarise(median = median(max))
#do same for postbreeding data
postbreedingmax <- postbreeding %>%
group_by(gridref, Species, year) %>%
summarise(max = max(TotalCount))
postbreedingmedian <- postbreedingmax %>%
group_by(gridref, Species) %>%
summarise(median = median(max))
shiny::runApp()
runApp()
runApp()
